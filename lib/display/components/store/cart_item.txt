import 'package:flutter/material.dart';

import 'package:haja/constants.dart';

import 'package:haja/content/store/content.dart';

class CartItem extends StatefulWidget {
  final StoreContent cartItem;

  const CartItem(
    this.cartItem, {
    Key? key,
  }) : super(key: key);

  @override
  _CartItemState createState() => _CartItemState();
}

class _CartItemState extends State<CartItem> with TickerProviderStateMixin {
  int _selectedColor = 0;
  int _selectedSize = 0;
  final List<Color> _colors = [
    Colors.red,
    Colors.blue,
    Colors.green,
    Colors.black,
    Colors.white,
  ];
  final List<String> _sizeOptions = [
    '22',
    '37',
    '45',
  ];
  RangeValues _selectedRange = const RangeValues(0, 2000);

  Widget button(String text, VoidCallback fnc) {
    return ElevatedButton(
      onPressed: fnc,
      child: Text(text),
    );
  }

  Widget productCart() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Expanded(
          child: Stack(
            children: [
              Positioned.fill(
                child: ClipRRect(
                  borderRadius:
                      BorderRadius.circular(Constants.defaultCardRadius),
                  child: widget.cartItem.icon,
                ),
              ),
              Positioned.fill(
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.bottomCenter,
                      end: Alignment.center,
                      colors: [
                        Colors.black.withOpacity(.3),
                        Colors.black.withOpacity(.0),
                      ],
                    ),
                  ),
                ),
              ),
              const Positioned(
                bottom: 5,
                left: 5,
                child: Text(
                  'PROMOTION',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 10,
                  ),
                ),
              ),
            ],
          ),
        ),
        const SizedBox(height: Constants.defaultPadding / 2),
        Container(
          padding: const EdgeInsets.symmetric(
            horizontal: Constants.defaultPadding / 3 * 2,
          ),
          child: Text(
            widget.cartItem.title,
            maxLines: 1,
            style: const TextStyle(fontSize: 18),
          ),
        ),
        const SizedBox(height: Constants.defaultPadding / 2),
        Row(
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Expanded(
              child: Container(
                padding: const EdgeInsets.only(
                  left: Constants.defaultPadding / 3 * 2,
                  bottom: Constants.defaultPadding / 2,
                ),
                child: Text(
                  widget.cartItem.priceStr,
                  maxLines: 1,
                  overflow: TextOverflow.fade,
                  textAlign: TextAlign.left,
                  style: TextStyle(
                    color: Theme.of(context).colorScheme.secondary,
                    fontSize: 16,
                    fontWeight: FontWeight.w800,
                  ),
                ),
              ),
            ),
            Expanded(
              child: ElevatedButton(
                onPressed: () {
                  addToCartModal(context);
                },
                style: ButtonStyle(
                  // foregroundColor: MaterialStateProperty.all<Color>(Colors.white),
                  // backgroundColor: MaterialStateProperty.all<Color>(Colors.red),
                  shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                    const RoundedRectangleBorder(
                      borderRadius: BorderRadius.zero,
                      // side: BorderSide(color: Colors.red),
                    ),
                  ),
                ),
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    vertical: Constants.defaultPadding / 2,
                  ),
                  child: Center(
                    child: Icon(
                      Icons.shopping_cart,
                      color: Theme.of(context).scaffoldBackgroundColor,
                      size: 20,
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget forYou() {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(
          width: 100,
          child: ClipRRect(
            borderRadius: BorderRadius.circular(15),
            child: widget.cartItem.icon,
          ),
        ),
        const SizedBox(width: 10),
        Expanded(
          child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  widget.cartItem.title,
                  style: const TextStyle(
                    fontSize: 18,
                  ),
                ),
                const SizedBox(height: 5),
                Text(
                  widget.cartItem.releasedStr,
                  style: TextStyle(
                    color: Theme.of(context).colorScheme.secondary,
                    fontSize: 13,
                  ),
                ),
                const SizedBox(height: 10),
                Text(
                  widget.cartItem.priceStr,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w800,
                  ),
                ),
              ]),
        )
      ],
    );
  }

  void showFilterModal(BuildContext context) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20), topRight: Radius.circular(20))),
      builder: (context) {
        return StatefulBuilder(builder: (context, setState) {
          return Container(
            padding:
                const EdgeInsets.only(top: 20, left: 20, right: 20, bottom: 20),
            height: MediaQuery.of(context).size.height * 0.8,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      'Filter',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    MaterialButton(
                      onPressed: () {
                        Navigator.pop(context);
                      },
                      minWidth: 40,
                      height: 40,
                      color: Theme.of(context).cardColor,
                      elevation: 0,
                      padding: const EdgeInsets.all(0),
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(50)),
                      child: const Icon(Icons.close),
                    )
                  ],
                ),
                const SizedBox(height: 20),
                const Text(
                  'Color',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 20,
                  ),
                ),
                const SizedBox(height: 10),
                SizedBox(
                  height: 60,
                  child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    itemCount: _colors.length,
                    itemBuilder: (context, index) {
                      return GestureDetector(
                        onTap: () {
                          setState(() {
                            _selectedColor = index;
                          });
                        },
                        child: AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          margin: const EdgeInsets.only(right: 10),
                          decoration: BoxDecoration(
                              color: _selectedColor == index
                                  ? _colors[index]
                                  : _colors[index].withOpacity(0.5),
                              shape: BoxShape.circle),
                          width: 40,
                          height: 40,
                          child: Center(
                            child: _selectedColor == index
                                ? Icon(
                                    Icons.check,
                                    color: Theme.of(context)
                                        .scaffoldBackgroundColor,
                                  )
                                : Container(),
                          ),
                        ),
                      );
                    },
                  ),
                ),
                const SizedBox(height: 20),
                const Text(
                  'Size',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 10),
                SizedBox(
                  height: 60,
                  child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    itemCount: _sizeOptions.length,
                    itemBuilder: (context, index) {
                      return GestureDetector(
                        onTap: () {
                          setState(() {
                            _selectedSize = index;
                          });
                        },
                        child: AnimatedContainer(
                          duration: const Duration(milliseconds: 500),
                          margin: const EdgeInsets.only(right: 10),
                          decoration: BoxDecoration(
                              color: _selectedSize == index
                                  ? Theme.of(context).colorScheme.secondary
                                  : Theme.of(context).cardColor,
                              shape: BoxShape.circle),
                          width: 40,
                          height: 40,
                          child: Center(
                            child: Text(
                              _sizeOptions[index],
                              style: TextStyle(
                                color: _selectedSize == index
                                    ? Theme.of(context).scaffoldBackgroundColor
                                    : null,
                                fontSize: 15,
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                ),
                // Slider Price Renge filter
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      'Price Range',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Text('\$ ${_selectedRange.start.toStringAsFixed(2)}',
                            style: TextStyle(
                                color: Theme.of(context).cardColor,
                                fontSize: 12)),
                        Text(' - ',
                            style:
                                TextStyle(color: Theme.of(context).cardColor)),
                        Text('\$ ${_selectedRange.end.toStringAsFixed(2)}',
                            style: TextStyle(
                                color: Theme.of(context).cardColor,
                                fontSize: 12)),
                      ],
                    ),
                  ],
                ),
                const SizedBox(height: 10),
                RangeSlider(
                    values: _selectedRange,
                    min: 0.00,
                    max: 2000.00,
                    divisions: 100,
                    inactiveColor: Theme.of(context).cardColor,
                    activeColor: Theme.of(context).colorScheme.secondary,
                    labels: RangeLabels(
                        '\$ ${_selectedRange.start.toStringAsFixed(2)}',
                        '\$ ${_selectedRange.end.toStringAsFixed(2)}'),
                    onChanged: (RangeValues values) {
                      setState(() => _selectedRange = values);
                    }),
                const SizedBox(height: 20),
                button('Filter', () {})
              ],
            ),
          );
        });
      },
    );
  }

  void addToCartModal(BuildContext context) {
    showModalBottomSheet(
        context: context,
        transitionAnimationController: AnimationController(
            duration: const Duration(milliseconds: 400), vsync: this),
        builder: (context) => StatefulBuilder(
              builder: (context, setState) {
                return Container(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Color',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 20,
                        ),
                      ),
                      const SizedBox(height: Constants.defaultPadding),
                      SizedBox(
                        height: 60,
                        child: ListView.builder(
                          scrollDirection: Axis.horizontal,
                          itemCount: _colors.length,
                          itemBuilder: (context, index) {
                            return GestureDetector(
                              onTap: () {
                                setState(() {
                                  _selectedColor = index;
                                });
                              },
                              child: AnimatedContainer(
                                duration: const Duration(milliseconds: 300),
                                margin: const EdgeInsets.only(right: 10),
                                decoration: BoxDecoration(
                                    color: _selectedColor == index
                                        ? _colors[index]
                                        : _colors[index].withOpacity(0.5),
                                    shape: BoxShape.circle),
                                width: 40,
                                height: 40,
                                child: Center(
                                  child: _selectedColor == index
                                      ? Icon(
                                          Icons.check,
                                          color: Theme.of(context)
                                              .scaffoldBackgroundColor,
                                        )
                                      : Container(),
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                      const SizedBox(height: Constants.defaultPadding * 2),
                      const Text(
                        'Size',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 20,
                        ),
                      ),
                      const SizedBox(height: Constants.defaultPadding),
                      SizedBox(
                        height: 60,
                        child: ListView.builder(
                          scrollDirection: Axis.horizontal,
                          itemCount: _sizeOptions.length,
                          itemBuilder: (context, index) {
                            return GestureDetector(
                              onTap: () {
                                setState(() {
                                  _selectedSize = index;
                                });
                              },
                              child: AnimatedContainer(
                                duration: const Duration(milliseconds: 500),
                                margin: const EdgeInsets.only(right: 10),
                                decoration: BoxDecoration(
                                    color: _selectedSize == index
                                        ? Theme.of(context)
                                            .colorScheme
                                            .secondary
                                        : Theme.of(context).cardColor,
                                    shape: BoxShape.circle),
                                width: 40,
                                height: 40,
                                child: Center(
                                  child: Text(
                                    _sizeOptions[index],
                                    style: TextStyle(
                                      color: _selectedSize == index
                                          ? Theme.of(context)
                                              .scaffoldBackgroundColor
                                          : null,
                                      fontSize: 15,
                                    ),
                                  ),
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                      const SizedBox(height: Constants.defaultPadding * 2),
                      button('Add to Cart', () {
                        Navigator.pop(context);

                        // Let's show a snackbar when an item is added to the cart
                        final snackbar = SnackBar(
                          content: const Text('Item added to cart'),
                          duration: const Duration(seconds: 5),
                          action: SnackBarAction(
                            label: 'Undo',
                            onPressed: () {},
                          ),
                        );

                        ScaffoldMessenger.of(context).showSnackBar(snackbar);
                      })
                    ],
                  ),
                );
              },
            ));
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => widget.cartItem.navigateTo(context),
      child: Container(
        decoration: BoxDecoration(
          color: Theme.of(context).scaffoldBackgroundColor,
          borderRadius: BorderRadius.circular(Constants.defaultCardRadius),
          // boxShadow: [BoxShadow(
          //   offset: Offset(Constants.defaultPadding / 5, Constants.defaultPadding / 4),
          //   blurRadius: Constants.defaultPadding / 3,
          //   color: (
          //     Theme.of(context).iconTheme.color ?? Theme.of(context).colorScheme.secondary
          //   ).withOpacity(.7),
          // )],
        ),
        margin: const EdgeInsets.all(Constants.defaultPadding / 2),
        child: ClipRRect(
          borderRadius: const BorderRadius.all(
              Radius.circular(Constants.defaultCardRadius)),
          child: productCart(),
        ),
      ),
    );
  }
}
